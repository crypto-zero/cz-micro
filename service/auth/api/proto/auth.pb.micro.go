// Code generated by protoc-gen-go-micro. DO NOT EDIT.
// versions:
// - protoc-gen-go-micro 23815987fd5c65de1306066d8380981c5ec77123
// - protoc              v3.19.4
// source: service/auth/api/proto/auth.proto

package proto

import (
	api "c-z.dev/go-micro/api"
	client "c-z.dev/go-micro/client"
	server "c-z.dev/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// NewAuthEndpoints API Endpoints for Auth service
func NewAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// AuthService is the client API for Auth service.
type AuthService interface {
	Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Verify(ctx context.Context, in *VerifyRequest, opts ...client.CallOption) (*VerifyResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Verify", in)
	out := new(VerifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthHandler is the server API for Auth service.
type AuthHandler interface {
	Verify(context.Context, *VerifyRequest, *VerifyResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) Verify(ctx context.Context, in *VerifyRequest, out *VerifyResponse) error {
	return h.AuthHandler.Verify(ctx, in, out)
}
